<?php


namespace SwitcherCore\Modules\HuaweiOLT;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class UniInterfacesStatus extends HuaweiOLTAbstractModule
{
    /**
     * @var SnmpResponse[]
     */
    protected $response = null;

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }


    function getPretty()
    {
        $data = [];
        $data = $this->getResponseByName('uni.status');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['status'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.configure.state');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['admin_state'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.configure.flowControl');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['flow_control'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.configure.vlan');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['vlan'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.configure.speed');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['speed'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.configure.duplex');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['duplex'] =  $r->getParsedValue();
            }
        }
        $data = $this->getResponseByName('uni.type');
        if(!$data->error()) {
            foreach ($data->fetchAll() as $r) {
                $iface = $this->findIfaceByOid($r->getOid(), 1);
                $uni = Helper::getIndexByOid($r->getOid());
                $ifaces[$iface['id']]['unis'][$uni]['num'] =  $uni;
                $ifaces[$iface['id']]['unis'][$uni]['type'] =  $r->getParsedValue();
            }
        }
        return array_values(array_map(function ($e){
            if(isset($e['unis'])) {
                $e['unis'] = array_values($e['unis']);
            }
            return $e;
        }, $ifaces));
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        $oidList = $this->oids->getOidsByRegex('uni\.*');
        $oids = [];
        foreach ($oidList as $oid) {
            $oids[] = $oid->getOid();
        }
        if($filter['interface']) {
            $iface = $this->parseInterface($filter['interface']);
            $oids = array_map(function ($e) use ($iface) {
                return $e . "." . $iface['xid'];
            }, $oids);
        }
        $oids = array_map(function ($e) {return \SnmpWrapper\Oid::init($e); }, $oids);
        $this->response = $this->formatResponse($this->snmp->walk($oids));
        return $this;
    }
}

