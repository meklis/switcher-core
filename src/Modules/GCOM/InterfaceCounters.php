<?php


namespace SwitcherCore\Modules\GCOM;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class InterfaceCounters extends GCOMAbstractModule
{
    /**
     * @var WrappedResponse[]
     */
    protected $response = null;

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }


    function getPretty()
    {
        $data = [];
        foreach ($this->response as $oidName => $dt) {
            if ($dt->error()) {
                continue;
            }
            $name = Helper::fromCamelCase(str_replace(["if.HC", "if", "ont.stat."], "", $oidName));
            foreach ($dt->fetchAll() as $resp) {
                try {
                    if (strpos($oidName, "ont.stat") !== false) {
                        $iface = $this->parseInterface($this->getOnuXidByOid($resp->getOid()), 'xid');
                    } else {
                        $iface = $this->parseInterface(Helper::getIndexByOid($resp->getOid()), 'xid');
                    }
                    $data[$iface['id']]['interface'] = $iface;
                    $data[$iface['id']][$name] = $resp->getValue();
                } catch (\Exception $e) {
                    $this->logger->error("error get interface_counters -> " . $e->getMessage());
                }
            }
        }
        ksort($data);
        return array_values($data);
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        $ontOids = [
            $this->oids->getOidByName('ont.stat.inOctets'),
            $this->oids->getOidByName('ont.stat.outOctets'),
            $this->oids->getOidByName('ont.stat.inCrcErrors'),
        ];
        $physOids = $this->getInterfaceCountersOids();
        if ($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            if ($interface['type'] === 'ONU') {
                $data = $this->formatResponse(
                    $this->snmp->get(
                        array_map(function ($o) use ($interface) {
                            return \SnmpWrapper\Oid::init($o->getOid() . ".{$interface['xid']}");
                        }, $ontOids)
                    )
                );
            } else {
                $data = $this->formatResponse(
                    $this->snmp->get(
                        array_map(function ($o) use ($interface) {
                            return \SnmpWrapper\Oid::init($o->getOid() . ".{$interface['xid']}");
                        }, $physOids)
                    )
                );
            }
            $this->response = $data;
            return $this;
        }

        if ($filter['interface_type'] === 'ONU') {
            $oids = $ontOids;
        } elseif ($filter['interface_type'] === 'PHYSICAL') {
            $oids = $physOids;
        } else {
            $oids = array_merge($ontOids, $physOids);
        }
        $this->response = $this->formatResponse(
            $this->snmp->walk(
                array_map(function ($o) {
                    return \SnmpWrapper\Oid::init($o->getOid());
                }, $oids)
            )
        );
        return $this;
    }
}

