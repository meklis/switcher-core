<?php


namespace SwitcherCore\Modules\GCOM;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class InterfaceDescriptions extends GCOMAbstractModule
{
    /**
     * @var WrappedResponse[]
     */
    protected $response = null;

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }


    function getPretty()
    {
        $data = [];
        foreach ($this->response as $name => $wrapped) {
            if ($wrapped->error()) {
                throw new Exception($wrapped);
            }
            foreach ($wrapped->fetchAll() as $resp) {
                try {
                    if($name === 'if.Alias') {
                        $d = [
                            'interface' => $this->parseInterface(Helper::getIndexByOid($resp->getOid())),
                            'description' => $resp->getValue(),
                        ];
                    } else {
                        $d = [
                            'interface' => $this->parseInterface($this->getOnuXidByOid($resp->getOid())),
                            'description' => strtolower($resp->getValue()) != 'epon' ? $resp->getValue() : null,
                        ];
                    }
                    if (!$d['interface']['id']) continue;
                    $data[] = $d;
                } catch (\Exception $e) {
                    $this->logger->error("Error get interface description for interface:" . $e->getMessage());
                }
            }
        }
        return $this->sortResponseByInterface($data);
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        if ($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            if ($interface['type'] === 'ONU') {
                $this->response = $this->formatResponse(
                    $this->snmp->get([
                        \SnmpWrapper\Oid::init($this->oids->getOidByName('ont.description')->getOid() . ".{$interface['xid']}"),
                    ])
                );
            } else {
                $this->response = $this->formatResponse(
                    $this->snmp->get([
                        \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid() . ".{$interface['xid']}"),
                    ])
                );
            }
            return $this;
        }

        $oids = [];
        if ($filter['interface_type'] === 'ONU') {
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('ont.description')->getOid());
        } elseif ($filter['interface_type'] === 'PHYSICAL') {
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid());
        } else {
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('ont.description')->getOid());
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid());
        }

        $this->response = $this->formatResponse(
            $this->snmp->walk($oids)
        );
        return $this;
    }
}

