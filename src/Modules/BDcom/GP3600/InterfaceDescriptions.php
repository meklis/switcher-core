<?php


namespace SwitcherCore\Modules\BDcom\GP3600;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class InterfaceDescriptions extends BDcomAbstractModule
{
    /**
     * @var SnmpResponse[]
     */
    protected $response = null;

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }

    function getOidsByInterfacesArray($interfaces)
    {
        $oids = [];
        foreach ($interfaces as $iface) {
            $oids = array_merge($oids, [
                \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid() . ".{$iface['xid']}"),
            ]);
        }
        return $oids;
    }

    function getPretty()
    {
        $data = [];
        foreach ($this->response as $resp) {
            try {
                $d = [
                    'interface' => $this->parseInterface(Helper::getIndexByOid($resp->getOid())),
                    'description' => $resp->getValue(),
                ];
                if (!$d['interface']['id']) continue;
                $data[] = $d;
            } catch (\Exception $e) {
                $this->logger->error("Error get interface description for interface:" . $e->getMessage());
            }
        }
        return $this->sortResponseByInterface($data);
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        if ($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            $data = $this->formatResponse(
                $this->snmp->get([
                    \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid() . ".{$interface['xid']}"),
                ])
            );
        }

        if ($filter['interface_type'] == 'ONU') {
            $ifaces = array_filter($this->getInterfacesIds(), fn($v) => $v['type'] == 'ONU');
            $oids = $this->getOidsByInterfacesArray($ifaces);
            $data = $this->formatResponse($this->snmp->get($oids));
        } elseif ($filter['interface_type'] == 'PHYSICAL') {
            $ifaces = $this->getPhysicalInterfaces();
            $oids = $this->getOidsByInterfacesArray($ifaces);
            $data = $this->formatResponse($this->snmp->get($oids));
        } elseif (!isset($filter['interface'])) {
            $data = $this->formatResponse(
                $this->snmp->walk(
                    [
                        \SnmpWrapper\Oid::init($this->oids->getOidByName('if.Alias')->getOid()),
                    ]
                )
            );
        }

        $resp = $this->getResponseByName('if.Alias', $data);
        if ($resp->error()) {
            throw new \Exception($resp->error());
        }
        $this->response = $this->getResponseByName('if.Alias', $data)->fetchAll();
        return $this;
    }
}

