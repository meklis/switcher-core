<?php


namespace SwitcherCore\Modules\BDcom\GP3600;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class UniInterfacesVlans extends BDcomAbstractModule
{
    /**
     * @var SnmpResponse[]
     */
    protected $response = null;

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }


    function getPretty()
    {
        return $this->sortResponseByInterface($this->response);
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        $gponProfiles = $this->getModule('pon_profiles')->run()->getPretty();
        if(!isset($gponProfiles['vlan'])) {
            throw new \Exception("Error load vlans profiles list from gpon_profiles module");
        }

        $profiles = [];
        foreach ($gponProfiles['vlan'] as $profile) {
            $profiles[$profile['id']] = $profile;
        }

        $oids = [];
        if($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('ont.uni.vlanProfileId')->getOid() . ".{$interface['xid']}");
        } else {
            $oids[] = \SnmpWrapper\Oid::init($this->oids->getOidByName('ont.uni.vlanProfileId')->getOid());
        }
        $response = $this->formatResponse($this->snmp->walk($oids));
        if(!isset($response['ont.uni.vlanProfileId'])) {
            throw new \Exception("Error loading ont.uni.vlanProfileId");
        }
        if($response['ont.uni.vlanProfileId']->error()) {
            throw new \Exception("error loading profile ids by unis: {$response['ont.uni.vlanProfileId']->error()}");
        }

        $data = [];
        foreach ($response['ont.uni.vlanProfileId']->fetchAll() as $val) {
            $iface = $this->parseInterface(Helper::getIndexByOid($val->getOid(), 1));
            $uni = Helper::getIndexByOid($val->getOid());
            if(!isset($profiles[$val->getValue()])) {
                throw new \Exception("Interface returned unknown vlan id profile {$val->getValue()}");
            }
            $data[$iface['id']]['unis'][$uni] = $profiles[$val->getValue()];
            $data[$iface['id']]['unis'][$uni]['num'] = (int)$uni;
            $data[$iface['id']]['interface'] = $iface;
        }
        $this->response = array_values(array_map(function ($e) {
            return [
                   'interface' => $e['interface'],
                   'unis' => array_values($e['unis']),
            ];
        }, $data));
        return $this;
    }
}

