<?php


namespace SwitcherCore\Modules\CData;


use Exception;
use SnmpWrapper\Oid;
use SnmpWrapper\Response\PoollerResponse;
use SnmpWrapper\Response\SnmpResponse;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\WrappedResponse;


/**
 * Class OntUniInformation
 * @package SwitcherCore\Modules\CData
 */
class OntInterfaceCounters extends CDataAbstractModule
{
    /**
     * @var WrappedResponse[]
     */
    protected $response = null ;
    function getRaw()
    {
        return $this->response;
    }
    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter); // TODO: Change the autogenerated stub
    }

    /**
     * @param WrappedResponse[] $response
     * @return array
     */
    private function process($response) {
        $interfaces = $this->getInterfacesWithIfHcIds();
        foreach ($response as $name=>$data) {
            if($data->error()) {
                throw new \SNMPException($data->error());
            }
            foreach ($data->fetchAll() as $r) {
                $xid = Helper::getIndexByOid($r->getOid());
                try {
                    if(!isset($interfaces[$xid])) continue;
                    switch ($name) {
                        case 'if.InErrors':
                            $interfaces[$xid]['in_errors'] = (int)$r->getValue();
                            break;
                        case 'if.OutErrors':
                            $interfaces[$xid]['out_errors'] = (int)$r->getValue();
                            break;
                        case 'if.InDiscards':
                            $interfaces[$xid]['in_discards'] = (int)$r->getValue();
                            break;
                        case 'if.OutDiscards':
                            $interfaces[$xid]['out_discards'] = (int)$r->getValue();
                            break;
                        case 'if.HCInOctets':
                            $interfaces[$xid]['in_octets'] = (int)$r->getValue();
                            break;
                        case 'if.HCOutOctets':
                            $interfaces[$xid]['out_octets'] = (int)$r->getValue();
                            break;
                        case 'if.HCOutMulticastPkts':
                            $interfaces[$xid]['out_multicast_pkts'] = (int)$r->getValue();
                            break;
                        case 'if.HCInMulticastPkts':
                            $interfaces[$xid]['in_multicast_pkts'] = (int)$r->getValue();
                            break;
                        case 'if.HCOutBroadcastPkts':
                            $interfaces[$xid]['out_broadcast_pkts'] = (int)$r->getValue();
                            break;
                        case 'if.HCInBroadcastPkts':
                            $interfaces[$xid]['in_broadcast_pkts'] = (int)$r->getValue();
                            break;
                    }
                } catch (\Exception $e) {}
            }
        }
        return array_values(array_filter($interfaces, function ($iface) {
           return
               isset($iface['in_octets']) &&
               isset($iface['out_octets']) &&
               isset($iface['in_errors']) &&
               isset($iface['out_errors']);
        }));
    }


    function getPretty()
    {
        return $this->response;
    }


    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        $oids = [
            $this->oids->getOidByName('if.InErrors'),
            $this->oids->getOidByName('if.InErrors'),
            $this->oids->getOidByName('if.OutErrors'),
            $this->oids->getOidByName('if.InDiscards'),
            $this->oids->getOidByName('if.OutDiscards'),
            $this->oids->getOidByName('if.HCInOctets'),
            $this->oids->getOidByName('if.HCOutOctets'),
        ];
        $suffix = '';
        if($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            $ifaces = $this->getInterfacesWithIfHcIds();
            $filteres = array_values(array_filter($ifaces, function ($i) use ($interface) {
                return $i['interface']['name'] == $interface['name'];
            }));
            if(count($filteres) == 0) {
                throw new \Exception("Not found interface id for HC mib");
            }
            $suffix = '.'.$filteres[0]['interface']['_hc_id'];
        }
        $oids = array_map(function ($o) use ($suffix) {
            return  Oid::init($o->getOid() . $suffix);
        }, $oids);

        $this->response = $this->process($this->formatResponse($this->snmp->walk($oids)));

        return $this;
    }


    protected $_ifacesHC = [];
    protected function getInterfacesWithIfHcIds() {
        if($this->_ifacesHC) return $this->_ifacesHC;
        $oids = [Oid::init($this->oids->getOidByName('if.Name')->getOid())];
        $response = $this->formatResponse($this->snmp->walk($oids));
        if(!isset($response['if.Name'])) {
            throw new \Exception("Not found response by if.Name");
        }
        if($response['if.Name']->error()) {
            throw new \Exception($response['if.Name']->error());
        }
        $interfaces = [];
        foreach ($response['if.Name']->fetchAll() as $iface) {
            $id = Helper::getIndexByOid($iface->getOid());
            try {
                $if = $this->parseInterface($iface->getValue());
                $interfaces[$id]['interface'] = $if;
                $interfaces[$id]['interface']['_hc_id'] = $id;
            } catch (\Exception $e) {}
        }
        $this->_ifacesHC = $interfaces;
        return  $interfaces;
    }
}

