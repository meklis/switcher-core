<?php


namespace SwitcherCore\Modules\CData;


use Exception;
use SwitcherCore\Config\Objects\Oid;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\SnmpResponse;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class PonOntsConfiguration extends CDataAbstractModule
{
    /**
     * @var SnmpResponse[]
     */
    protected $response = null;

    protected $profiles = [];

    function getRaw()
    {
        return $this->response;
    }

    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }

    function getPretty()
    {
        $mapped = [];
        foreach ($this->profiles as $profName=>$profiles) {
            foreach ($profiles as $profile) {
                $mapped[$profName][$profile['id']] = $profile;
            }
        }
        $response = [];
        $wrapped = $this->formatResponse($this->response);
        if(isset($wrapped['ont.profile.line']) && !$wrapped['ont.profile.line']->error()) {
            foreach ($wrapped['ont.profile.line']->fetchAll() as $data) {
                $iface = $this->parseInterface(Helper::getIndexByOid($data->getOid()));
                $response[$iface['id']]['interface'] = $iface;
                $response[$iface['id']]['_line_id'] = $data->getValue();
                $response[$iface['id']]['line'] = isset($mapped['line'][$data->getValue()]) ? $mapped['line'][$data->getValue()] : null;
            }
        }
        if(isset($wrapped['ont.profile.srv']) && !$wrapped['ont.profile.srv']->error()) {
            foreach ($wrapped['ont.profile.srv']->fetchAll() as $data) {
                $iface = $this->parseInterface(Helper::getIndexByOid($data->getOid()));
                $response[$iface['id']]['interface'] = $iface;
                $response[$iface['id']]['_srv_id'] = $data->getValue();
                $response[$iface['id']]['srv'] = isset($mapped['srv'][$data->getValue()]) ? $mapped['srv'][$data->getValue()] : null;
            }
        }
        return array_values($response);
    }

    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        if(!$this->profiles) {
            $this->profiles = $this->getModule('pon_profiles')->run(['load_only'=>'srv,line'])->getPrettyFiltered();
        }
        $oids = $this->oids->getOidsByRegex('ont\.profile\..*');
        if ($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            $this->response = $this->snmp->get(array_map(function ($e) use (&$interface) {
                return \SnmpWrapper\Oid::init("{$e->getOid()}.{$interface['id']}");
            }, $oids));
            return $this;
        } else {
            $this->response = $this->snmp->walk(array_map(function ($e) {
                return \SnmpWrapper\Oid::init($e->getOid());
            }, $oids));
        }
        return $this;
    }
}

