<?php


namespace SwitcherCore\Modules\CData\FD11XX;


use Exception;
use SnmpWrapper\Oid;
use SnmpWrapper\Response\PoollerResponse;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\WrappedResponse;

class OntUniPortsStatus extends CDataAbstractModule
{
    /**
     * @var WrappedResponse[]
     */
    protected $response = null ;
    function getRaw()
    {
        return $this->response;
    }
    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter, $fromCache); // TODO: Change the autogenerated stub
    }

    /**
     * @param PoollerResponse[] $response
     * @return array
     * @throws \SwitcherCore\Exceptions\IncompleteResponseException
     */
    private function process($interface = null) {

        $RETURN = [];
        $basicOids = $this->oids->getOidsByRegex('ont.uni\..*');
        $oids = [];
        if($interface) {
            foreach ($basicOids as $oid) {
                $oids[] = Oid::init("{$oid->getOid()}.{$interface['_snmp_id']}");
            }
        } else {
            foreach ($basicOids as $oid) {
                $oids[] = Oid::init("{$oid->getOid()}");
            }
        }
        foreach ($this->formatResponse($this->snmp->walkNext($oids)) as $resp) {
            if($resp->error()) {
                $this->logger->error("Error loading UNI: {$resp->error()}");
                continue;
            }
            foreach ($resp->fetchAll() as $r) {
                $uniNum = Helper::getIndexByOid($r->getOid());
                $onuNum = Helper::getIndexByOid($r->getOid(), 1);
                $ponNum = Helper::getIndexByOid($r->getOid(), 2);
                $interface = $this->parseInterface(($ponNum * 1000) + $onuNum);
                $name = $this->oids->findOidById($r->getOid())->getName();
                $RETURN[$interface['id']]['interface'] = $interface;
                $RETURN[$interface['id']]['unis'][$uniNum]['num'] = (int)$uniNum;
                switch ($name) {
                    case 'ont.uni.description':
                        $RETURN[$interface['id']]['unis'][$uniNum]['description'] = $this->convertHexToString($r->getHexValue());
                        break;
                    case 'ont.uni.opStatus':
                    case 'ont.uni.speed':
                    case 'ont.uni.duplex':
                    case 'ont.uni.adminStatus':
                    case 'ont.uni.type':
                        $name = Helper::fromCamelCase(str_replace("ont.uni.", "", $name));
                        $RETURN[$interface['id']]['unis'][$uniNum][$name] = $r->getParsedValue();
                        break;
                }
            }
        }
        return array_values(array_map(function ($onu) {
                $unis = array_map(function ($uni) {
                    $status = null;
                    if(isset($uni['op_status']) && isset($uni['speed']) && isset($uni['duplex'])) {
                        if($uni['op_status'] == 'Up') {
                            $status = "Up";
                        } else {
                            $status = "Down";
                        }
                    }
                    return [
                      'admin_state' => isset($uni['admin_status']) ? $uni['admin_status'] : null,
                      'status' => $status,
                      'speed' => isset($uni['speed']) ? $uni['speed'] : null,
                      'duplex' => isset($uni['duplex']) ? $uni['duplex'] : null,
                      'type' => isset($uni['type']) ? $uni['type'] : 'Unknown' ,
                      'num' => $uni['num'],
                    ];
                }, $onu['unis']);
                $onu['unis'] = array_values($unis);
                return $onu;
        }, $RETURN));
    }

    function getPretty()
    {
        return $this->response;
    }


    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {

        if($filter['interface']) {
            $iface = $this->parseInterface($filter['interface']);
            if($iface['type'] === 'ONU') {
                $this->response = $this->process($iface);
            }
            return $this;
        }
        $this->response = $this->process();
        return $this;
    }
}

