<?php


namespace SwitcherCore\Modules\CData;


use Exception;
use SnmpWrapper\Oid;
use SnmpWrapper\Response\PoollerResponse;
use SnmpWrapper\Response\SnmpResponse;
use SwitcherCore\Modules\AbstractModule;
use SwitcherCore\Modules\Helper;
use SwitcherCore\Switcher\Objects\WrappedResponse;


/**
 * Class OntUniInformation
 * @package SwitcherCore\Modules\CData
 */
class OntUniPortsStatus extends CDataAbstractModule
{
    /**
     * @var WrappedResponse[]
     */
    protected $response = null ;

    function getRaw()
    {
        return $this->response;
    }



    function getPrettyFiltered($filter = [], $fromCache = false)
    {
        return parent::getPrettyFiltered($filter); // TODO: Change the autogenerated stub
    }

    public function getUniDataByConsole($interface){
        if ($interface['type'] != 'ONU') {
            throw new \Exception("Interface type {$interface['type']} should be onu");
        }
        if (!preg_match('/^(pon)([0-9])\/([0-9])\/([0-9]{1,})\:?([0-9]{1,3})?\/?([0-9]{1,3})?$/', $interface['name'], $m)) {
            throw new \Exception("Interface {$interface['type']} not supported!");
        }

        if($interface['pontype']) {
            $m[1] = $interface['pontype'];
        }

        $telnetIdent = "{$m[1]} {$m[2]}/{$m[3]}";

        $this->console->exec("interface {$telnetIdent}");
        sleep(0.1);
        $resp = $this->console->exec("show ont port state {$m[4]} {$m[5]} eth all");
        $parsed_responce = [];
        $lines = explode("\n", $resp);

        for($i=0;$i<count($lines);$i++){
            $parts = preg_split('/\s+/', trim($lines[$i]));
            if(count($parts) > 1){
                $parsed_responce[] = $parts;
            }
        }
        return $parsed_responce;
    }
    /**
     * @param PoollerResponse[] $response
     * @return array
     */
    private function process($response) {
        $return = [];
        foreach ($response as $raw) {
            $oid = $this->oids->findOidById($raw->getOid());
            $pool = WrappedResponse::init($raw, $oid->getValues());
            $name = substr($oid->getName(), 8);
            switch ($name) {
                case 'opStatus':
                    $name = 'status'; break;
            }
            $key = Helper::fromCamelCase($name);
            if($pool->error()) continue;
            foreach ($pool->fetchAll() as $resp) {
                $ifaceId = Helper::getIndexByOid($resp->getOid(), 2);
                $interface = $this->parseInterface($ifaceId);
                $uni = Helper::getIndexByOid($resp->getOid());
                if($uni) {
                    $interface['uni'] = $uni;
                }
                if(!$uni) {
                    continue;
                }
                $val = $resp->getValue();
                switch ($key) {
                    case 'status': $val = $resp->getParsedValue(); break;
                    case 'admin_state':
                    case 'vlan_mode': $val = $resp->getParsedValue(); break;
                }
                $return[$interface['id']]['unis'][$uni][$key] = $val;
                $return[$interface['id']]['unis'][$uni]['num'] = (int)$uni;
                $return[$interface['id']]['interface'] = $interface;
            }
        }
        foreach ($return as $interfaceID=>$ifaceData) {
            if(str_contains($this->device->getModelKey(), 'c_data_fd16')) {
                $uni_data = $this->getUniDataByConsole($ifaceData['interface']);
            }
            foreach ($ifaceData['unis'] as $uniNum=>$uni) {
                if(isset($uni['admin_state']) && $uni['admin_state'] === 'Disabled') {
                    $return[$interfaceID]['unis'][$uniNum]['status'] = 'Disabled';
                }
                if(str_contains($this->device->getModelKey(), 'c_data_fd16')){
                    $return[$interfaceID]['unis'][$uniNum]['type'] = $uni_data[$uniNum][4];
                    $return[$interfaceID]['unis'][$uniNum]['speed'] = $uni_data[$uniNum][5];
                    $return[$interfaceID]['unis'][$uniNum]['duplex'] = ucfirst($uni_data[$uniNum][6]);
                }
            }
        }
        return array_values(array_map(function ($e){
            $e['unis'] = array_values($e['unis']);
            return $e;
        },$return));
    }


    function getPretty()
    {
        return $this->response;
    }


    /**
     * @param array $filter
     * @return $this|AbstractModule
     * @throws Exception
     */
    public function run($filter = [])
    {
        $oids = [];
        $oidsLoc = $this->oids->getOidsByRegex('^ont\.uni\..*');
        $suffix = '';
        if($filter['interface']) {
            $interface = $this->parseInterface($filter['interface']);
            $suffix = '.'.$interface['id'];
        }
        foreach ($oidsLoc as $oid) {
            $oids[] = Oid::init($oid->getOid() . $suffix);
        }
        $this->response = $this->process($this->snmp->walk($oids));

        return $this;
    }
}

