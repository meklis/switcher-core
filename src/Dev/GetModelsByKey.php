<?php

namespace SwitcherCore\Dev;

use SwitcherCore\Switcher\Console\ConsoleInterface;
use SwitcherCore\Switcher\CoreConnector;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class GetModelsByKey extends AbstractCommand
{
    /**
     * @Inject
     * @var CoreConnector
     */
    protected $swc;
    function configure()
    {
        $this->setName("devices-by-module")
            ->setDescription("Return devices list by module")
            ->addArgument("module_name", InputArgument::REQUIRED, "Module name")
        ;
        parent::configure(); // TODO: Change the autogenerated stub
    }

    function exec(InputInterface $input, OutputInterface $output)
    {

        $output->writeln("<comment>Devices list with module {$this->input->getArgument('module_name')} </comment>");
        $table = new Table($output);
        $table->setHeaders([
            'Key',
            'Name',
            'Type',

        ]);
        foreach ($this->getData($this->input->getArgument('module_name')) as $dt) {
            $table->addRow([
                $dt['key'],
                $dt['name'],
                $dt['type'],
            ]);
        }
        $table->render();
    }
    function getData($moduleName)
    {
        $reader = new \SwitcherCore\Config\Reader(__DIR__ . "/../../configs");
        $devices = $reader->readModels();
        $supportDevices = [];
        foreach ($devices as $dev) {
            $supportDevices[$dev->getKey()]['name'] = $dev->getName();
            $supportDevices[$dev->getKey()]['key'] = $dev->getKey();
            $supportDevices[$dev->getKey()]['modules'] = $dev->getModulesList();
            $supportDevices[$dev->getKey()]['type'] = $dev->getDeviceType();
            if($dev->getRewrites() && isset($dev->getRewrites()['mapping'])) {
                foreach ($dev->getRewrites()['mapping'] as $mapping) {
                    if(!isset($mapping['rewrite']['key'])) continue;
                    if(!isset($mapping['rewrite']['name'])) continue;
                    $supportDevices[$mapping['rewrite']['key']]['name'] = $mapping['rewrite']['name'];
                    $supportDevices[$mapping['rewrite']['key']]['key'] = $mapping['rewrite']['key'];
                    $supportDevices[$mapping['rewrite']['key']]['modules'] = $dev->getModulesList();
                    $supportDevices[$mapping['rewrite']['key']]['type'] = $dev->getDeviceType();
                }

            }
        }


        ksort($supportDevices);
        $devices = [];
        foreach ($supportDevices as $key=>$data) {
            foreach ($data['modules'] as $module) {
                if($module == $moduleName) {
                    $devices[] = [
                        'name' => $data['name'],
                        'key' => $data['key'],
                        'type' => $data['type'],
                    ];
                }
            }

        }
        return $devices;
    }
}