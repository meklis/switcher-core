<?php

namespace SwitcherCore\Dev;

use SwitcherCore\Switcher\Console\ConsoleInterface;
use SwitcherCore\Switcher\CoreConnector;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class SwitcherCoreCallModuleCommand extends AbstractCommand
{
    /**
     * @Inject
     * @var CoreConnector
     */
    protected $swc;
    function configure()
    {
        $this->setName("call")
            ->setDescription("Allow call some module from device")
            ->addArgument("ip", InputArgument::REQUIRED, "Device ip address")
            ->addArgument("module", InputArgument::REQUIRED, "Module name")
            ->addArgument("arguments", InputArgument::IS_ARRAY, "Arguments. For example interface=pon0/1/1")
            ->addOption("meta", "m", InputArgument::OPTIONAL, "Show meta", false)
            ->addOption("community", "c", InputOption::VALUE_OPTIONAL, "Community name", "public")
            ->addOption("username", "u", InputOption::VALUE_OPTIONAL, "Console username", "admin")
            ->addOption("password", "p", InputOption::VALUE_OPTIONAL, "Console password", "admin")
            ->addOption("snmp-port", "sp", InputOption::VALUE_OPTIONAL, "SNMP port", "161")
            ->addOption("console-port", "cp", InputOption::VALUE_OPTIONAL, "SNMP port", "23")
        ;
        parent::configure(); // TODO: Change the autogenerated stub
    }

    function exec(InputInterface $input, OutputInterface $output)
    {
        $arguments = [];
        foreach ($input->getArgument('arguments') as $argkv) {
            list($key, $value) = @explode("=", $argkv);
            $arguments[$key] = $value;
        }
        $ip = $input->getArgument('ip');
        $core = $this->getCore($ip, $input->getOption('community'), $input->getOption('username'), $input->getOption('password'), $input->getOption('console-port'), $input->getOption('snmp-port'));
        
        if ($output->isVerbose()) {
            $output->writeln("<info>=================================================================================</info>");
            $output->writeln(" <comment>Start calling from device {$ip}</comment>");
            $output->writeln("   Module: <info>{$input->getArgument('module')}</info>");
            $output->writeln("   Arguments: <info>" . json_encode($arguments) . "</info>");
            $output->writeln("<info>=================================================================================</info>");
        }
        $start = microtime(true);
        $response = $core->action($input->getArgument('module'), $arguments);
        $time = microtime(true) - $start;

        $output->writeln(json_encode($response, JSON_PRETTY_PRINT | JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE));
        if ($output->isVerbose()) {
            $output->writeln("<info>=================================================================================</info>");
            $output->writeln("<info>\tSpent time: " . round($time, 4) . " sec</info>");
            $output->writeln("<info>=================================================================================</info>");
        }

        if($output->isVerbose()) {
            /**
             * @var ConsoleInterface $telnet
             */
            try {
                $output->writeln("<comment>Telnet output:</comment>");
                $output->writeln("<comment>-------------------------------------------------------------------------------</comment>");
                $telnet = $core->getContainer()->get(ConsoleInterface::class);
                $output->writeln($telnet->getGlobalBuffer());
                $output->writeln("<comment>-------------------------------------------------------------------------------</comment>");
            } catch (\Throwable $e) {}

        }
    }
}